import { Board } from "./Board.ts";
export const bingoWinner = async () => {
    const input = await Deno.readTextFile("./bingogame.txt");
    let game = buildGame(input.split("\n"));
    let winner;
    let play = 0;
    while (winner === undefined) {
        game.boards.forEach(board => {
            board.markNumber(game.plays[play]);
            if (board.wonWih !== undefined) {
                winner = board;
            }
        });
        play++;
    }
    return winner.result();
};
bingoWinner().then((board) => {
    console.log(`${board}`);
});
function buildGame(input) {
    let boards = new Array();
    for (let i = 2; i < input.length; i += 6) {
        let lines = new Array();
        for (let j = 0; j < 5; j++) {
            lines.push(input[j + i].split(" ").filter(s => s.length > 0).map(s => parseInt(s.trim(), 10)));
        }
        boards.push(new Board(lines));
    }
    return {
        plays: input[0].split(",").filter(s => s.length > 0).map(s => parseInt(s.trim(), 10)),
        boards
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZmlsZTovLy9Vc2Vycy9zcm9kb2xmby9kb2xmby9hZHZlbnRvZmNvZGUvMDQvYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBUW5DLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxLQUFLLElBQXFCLEVBQUU7SUFDbkQsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFFekQsSUFBSSxJQUFJLEdBQWMsU0FBUyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUVuRCxJQUFJLE1BQXlCLENBQUM7SUFDOUIsSUFBSSxJQUFJLEdBQVcsQ0FBQyxDQUFDO0lBQ3JCLE9BQU0sTUFBTSxLQUFLLFNBQVMsRUFBRTtRQUN4QixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN4QixLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNuQyxJQUFHLEtBQUssQ0FBQyxNQUFNLEtBQUssU0FBUyxFQUFFO2dCQUMzQixNQUFNLEdBQUcsS0FBSyxDQUFDO2FBQ2xCO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLEVBQUUsQ0FBQztLQUNWO0lBQ0QsT0FBTyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDM0IsQ0FBQyxDQUFBO0FBRUQsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7SUFDekIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLENBQUM7QUFDNUIsQ0FBQyxDQUFDLENBQUM7QUFFSCxTQUFTLFNBQVMsQ0FBQyxLQUFlO0lBRTlCLElBQUksTUFBTSxHQUFHLElBQUksS0FBSyxFQUFTLENBQUM7SUFDaEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFFLENBQUMsRUFBRTtRQUNwQyxJQUFJLEtBQUssR0FBZSxJQUFJLEtBQUssRUFBWSxDQUFDO1FBQzlDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDeEIsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQy9GO1FBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0tBQ2pDO0lBRUQsT0FBTztRQUNILEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN0RixNQUFNO0tBQ1QsQ0FBQztBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb2FyZCB9IGZyb20gXCIuL0JvYXJkLnRzXCI7XG5cbmludGVyZmFjZSBCaW5nb0dhbWUge1xuICAgIHBsYXlzOiBudW1iZXJbXVxuICAgIGJvYXJkczogQm9hcmRbXVxufVxuXG4vL1doYXQgaXMgdGhlIHBvd2VyIGNvbnN1bXB0aW9uIG9mIHRoZSBzdWJtYXJpbmU/XG5leHBvcnQgY29uc3QgYmluZ29XaW5uZXIgPSBhc3luYyAoKTogUHJvbWlzZTxudW1iZXI+ID0+IHtcbiAgICBjb25zdCBpbnB1dCA9IGF3YWl0IERlbm8ucmVhZFRleHRGaWxlKFwiLi9iaW5nb2dhbWUudHh0XCIpO1xuXG4gICAgbGV0IGdhbWU6IEJpbmdvR2FtZSA9IGJ1aWxkR2FtZShpbnB1dC5zcGxpdChcIlxcblwiKSk7XG5cbiAgICBsZXQgd2lubmVyOiBCb2FyZCB8IHVuZGVmaW5lZDtcbiAgICBsZXQgcGxheTogbnVtYmVyID0gMDtcbiAgICB3aGlsZSh3aW5uZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBnYW1lLmJvYXJkcy5mb3JFYWNoKGJvYXJkID0+IHtcbiAgICAgICAgICAgIGJvYXJkLm1hcmtOdW1iZXIoZ2FtZS5wbGF5c1twbGF5XSk7XG4gICAgICAgICAgICBpZihib2FyZC53b25XaWggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHdpbm5lciA9IGJvYXJkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcGxheSsrO1xuICAgIH1cbiAgICByZXR1cm4gd2lubmVyLnJlc3VsdCgpO1xufVxuXG5iaW5nb1dpbm5lcigpLnRoZW4oKGJvYXJkKSA9PiB7XG4gICAgY29uc29sZS5sb2coYCR7Ym9hcmR9YCk7XG59KTtcblxuZnVuY3Rpb24gYnVpbGRHYW1lKGlucHV0OiBzdHJpbmdbXSk6IEJpbmdvR2FtZSB7XG5cbiAgICBsZXQgYm9hcmRzID0gbmV3IEFycmF5PEJvYXJkPigpO1xuICAgIGZvciAobGV0IGkgPSAyOyBpIDwgaW5wdXQubGVuZ3RoOyBpKz02KSB7XG4gICAgICAgIGxldCBsaW5lczogbnVtYmVyW11bXSA9IG5ldyBBcnJheTxudW1iZXJbXT4oKTtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCA1OyBqKyspIHtcbiAgICAgICAgICAgIGxpbmVzLnB1c2goaW5wdXRbaitpXS5zcGxpdChcIiBcIikuZmlsdGVyKHMgPT4gcy5sZW5ndGggPiAwKS5tYXAocyA9PiBwYXJzZUludChzLnRyaW0oKSwxMCkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJvYXJkcy5wdXNoKG5ldyBCb2FyZChsaW5lcykpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHBsYXlzOiBpbnB1dFswXS5zcGxpdChcIixcIikuZmlsdGVyKHMgPT4gcy5sZW5ndGggPiAwKS5tYXAoIHMgPT4gcGFyc2VJbnQocy50cmltKCksIDEwKSksXG4gICAgICAgIGJvYXJkc1xuICAgIH07XG59XG5cbiJdfQ==