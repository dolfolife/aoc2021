export class Board {
    board;
    markedNumbers;
    wonWih;
    constructor(board) {
        this.markedNumbers = new Set();
        this.board = board;
    }
    markNumber(number) {
        this.markedNumbers.add(number);
        if (this.won())
            this.wonWih = number;
    }
    won() {
        let result = false;
        for (let row = 0; row < 5; row++) {
            let won = true;
            for (let col = 0; col < 5; col++) {
                if (!this.markedNumbers.has(this.board[row][col])) {
                    won = false;
                }
            }
            if (won) {
                result = true;
                break;
            }
        }
        if (result === false) {
            for (let col = 0; col < 5; col++) {
                let won = true;
                for (let j = 0; j < 5; j++) {
                    if (!this.markedNumbers.has(this.board[j][col])) {
                        won = false;
                    }
                }
                if (won) {
                    result = true;
                    break;
                }
            }
        }
        return result;
    }
    result() {
        let sum = 0;
        for (let col = 0; col < 5; col++) {
            for (let j = 0; j < 5; j++) {
                if (!this.markedNumbers.has(this.board[j][col])) {
                    sum += this.board[j][col];
                }
            }
        }
        return sum * this.wonWih;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZmlsZTovLy9Vc2Vycy9zcm9kb2xmby9kb2xmby9hZHZlbnRvZmNvZGUvMDQvQm9hcmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsTUFBTSxPQUFPLEtBQUs7SUFDZCxLQUFLLENBQWE7SUFDbEIsYUFBYSxDQUFjO0lBQzNCLE1BQU0sQ0FBcUI7SUFFM0IsWUFBWSxLQUFpQjtRQUN6QixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksR0FBRyxFQUFVLENBQUM7UUFDdkMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDdkIsQ0FBQztJQUVELFVBQVUsQ0FBQyxNQUFjO1FBQ3JCLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQy9CLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNWLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQzdCLENBQUM7SUFFRCxHQUFHO1FBQ0MsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBRW5CLEtBQUssSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDOUIsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDO1lBQ2YsS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRTtnQkFDOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtvQkFDL0MsR0FBRyxHQUFHLEtBQUssQ0FBQztpQkFDZjthQUNKO1lBQ0QsSUFBSSxHQUFHLEVBQUU7Z0JBQ0wsTUFBTSxHQUFHLElBQUksQ0FBQztnQkFDZCxNQUFNO2FBQ1Q7U0FDSjtRQUVELElBQUksTUFBTSxLQUFLLEtBQUssRUFBRTtZQUNsQixLQUFLLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFO2dCQUM5QixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUM7Z0JBQ2YsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtvQkFDeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTt3QkFDN0MsR0FBRyxHQUFHLEtBQUssQ0FBQztxQkFDZjtpQkFDSjtnQkFDRCxJQUFJLEdBQUcsRUFBRTtvQkFDTCxNQUFNLEdBQUcsSUFBSSxDQUFDO29CQUNkLE1BQU07aUJBQ1Q7YUFDSjtTQUNKO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVELE1BQU07UUFDRixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDWixLQUFLLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFO1lBQzlCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7b0JBQzdDLEdBQUcsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUM3QjthQUNKO1NBQ0o7UUFFRCxPQUFPLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTyxDQUFDO0lBQzlCLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbIi8vIGZyb20gaHR0cHM6Ly9hZHZlbnRvZmNvZGUuY29tLzIwMjEvZGF5LzRcbmV4cG9ydCBjbGFzcyBCb2FyZCB7XG4gICAgYm9hcmQ6IG51bWJlcltdW107XG4gICAgbWFya2VkTnVtYmVyczogU2V0PG51bWJlcj47XG4gICAgd29uV2loOiBudW1iZXIgfCB1bmRlZmluZWQ7XG5cbiAgICBjb25zdHJ1Y3Rvcihib2FyZDogbnVtYmVyW11bXSkge1xuICAgICAgICB0aGlzLm1hcmtlZE51bWJlcnMgPSBuZXcgU2V0PG51bWJlcj4oKTtcbiAgICAgICAgdGhpcy5ib2FyZCA9IGJvYXJkO1xuICAgIH1cblxuICAgIG1hcmtOdW1iZXIobnVtYmVyOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5tYXJrZWROdW1iZXJzLmFkZChudW1iZXIpO1xuICAgICAgICBpZiAodGhpcy53b24oKSlcbiAgICAgICAgICAgIHRoaXMud29uV2loID0gbnVtYmVyO1xuICAgIH1cblxuICAgIHdvbigpOiBib29sZWFuIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IGZhbHNlO1xuXG4gICAgICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IDU7IHJvdysrKSB7XG4gICAgICAgICAgICBsZXQgd29uID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvciAobGV0IGNvbCA9IDA7IGNvbCA8IDU7IGNvbCsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm1hcmtlZE51bWJlcnMuaGFzKHRoaXMuYm9hcmRbcm93XVtjb2xdKSkge1xuICAgICAgICAgICAgICAgICAgICB3b24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAod29uKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZXN1bHQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBjb2wgPSAwOyBjb2wgPCA1OyBjb2wrKykge1xuICAgICAgICAgICAgICAgIGxldCB3b24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgNTsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5tYXJrZWROdW1iZXJzLmhhcyh0aGlzLmJvYXJkW2pdW2NvbF0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3b24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAod29uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcmVzdWx0KCk6IG51bWJlciB7XG4gICAgICAgIGxldCBzdW0gPSAwO1xuICAgICAgICBmb3IgKGxldCBjb2wgPSAwOyBjb2wgPCA1OyBjb2wrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCA1OyBqKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMubWFya2VkTnVtYmVycy5oYXModGhpcy5ib2FyZFtqXVtjb2xdKSkge1xuICAgICAgICAgICAgICAgICAgICBzdW0gKz0gdGhpcy5ib2FyZFtqXVtjb2xdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdW0gKiB0aGlzLndvbldpaCE7XG4gICAgfVxufVxuIl19